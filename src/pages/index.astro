---
import Layout from '../layouts/Layout.astro';
import WeatherDisplay from '../components/WeatherDisplay.astro';
import { getCoordinates, getWeatherData } from '../utils/api';
import { processWeatherData } from '../utils/weather';

const defaultCity = "Madrid";

let currentWeather;
let error = null;

try {
  const { latitude, longitude, name } = await getCoordinates(defaultCity);
  const weatherData = await getWeatherData(latitude, longitude);
  currentWeather = processWeatherData(weatherData, name);
} catch (e) {
  error = e.message;
  console.error('Error fetching initial weather data:', e);
}
---

<Layout title="Weather App">
  <main class="container mx-auto px-4 py-8 max-w-4xl">
    <h1 class="text-5xl font-bold text-center mb-8 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
      WeatherMine
    </h1>
    
    <form id="search-form" class="mb-8">
      <div class="flex justify-center space-x-4 max-w-md mx-auto relative">
        <div class="relative flex-grow">
          <input
            type="text"
            id="city-input"
            placeholder="Enter city or village"
            class="border-2 border-gray-300 dark:border-gray-600 p-3 rounded-xl w-full bg-white dark:bg-gray-800 focus:border-blue-500 focus:outline-none transition-colors duration-200 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
            value={defaultCity}
            autocomplete="off"
          />
          <div id="suggestions-dropdown" class="absolute top-full left-0 right-0 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg z-50 max-h-60 overflow-y-auto hidden">
            <!-- Suggestions will be populated here -->
          </div>
        </div>
        <button 
          type="button" 
          id="location-btn"
          class="bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700 transition-all duration-300 px-4 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center"
          title="Use current location"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
          </svg>
        </button>
        <button type="submit" class="bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 transition-all duration-300 px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:scale-105">
          Search
        </button>
      </div>
    </form>
    
    <div id="weather-container">
      {error ? (
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6 text-center">
          <p class="text-red-600 dark:text-red-400 text-lg">{error}</p>
        </div>
      ) : (
        <WeatherDisplay weatherData={currentWeather} />
      )}
    </div>

    <!-- Location permission modal -->
    <div id="location-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 max-w-md mx-4 shadow-2xl">
        <div class="text-center">
          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 dark:bg-blue-900 mb-4">
            <svg class="h-6 w-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            Enable Location Access
          </h3>
          <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">
            Allow WeatherMine to access your location to show weather for your current area.
          </p>
          <div class="flex space-x-3">
            <button 
              id="allow-location" 
              class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200"
            >
              Allow
            </button>
            <button 
              id="deny-location" 
              class="flex-1 bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200 font-medium py-2 px-4 rounded-lg transition-colors duration-200"
            >
              Not Now
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { getCoordinates, getWeatherData, searchCities } from '../utils/api';
  import { processWeatherData, getWeatherDescription } from '../utils/weather';

  const form = document.getElementById('search-form');
  const cityInput = document.getElementById('city-input');
  const locationBtn = document.getElementById('location-btn');
  const suggestionsDropdown = document.getElementById('suggestions-dropdown');
  const weatherContainer = document.getElementById('weather-container');
  const locationModal = document.getElementById('location-modal');
  const allowLocationBtn = document.getElementById('allow-location');
  const denyLocationBtn = document.getElementById('deny-location');

  let debounceTimer;
  let selectedSuggestionIndex = -1;
  let suggestions = [];

  // Check if user has previously denied location or if we should ask
  const hasAskedForLocation = localStorage.getItem('locationAsked');
  const locationDenied = localStorage.getItem('locationDenied');

  function getWeatherIcon(code: number): string {
    if (code <= 3) return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2" fill="none"/>
        <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
      </svg>
    `;
    if (code <= 48) return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
      </svg>
    `;
    if (code <= 67) return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
        <path d="M16 17v1a2 2 0 0 1-2 2H9l3-3 3 3a2 2 0 0 1-2-2v-1"/>
      </svg>
    `;
    if (code <= 77) return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
        <path d="M8 21l1-1 1 1-1 1-1-1zm4 0l1-1 1 1-1 1-1-1zm4 0l1-1 1 1-1 1-1-1z"/>
      </svg>
    `;
    return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
        <path d="M13 16l-4-4 4-4M17 16l-4-4 4-4"/>
      </svg>
    `;
  }

  function formatLocationName(suggestion) {
    let parts = [suggestion.name];
    
    if (suggestion.admin2 && suggestion.admin2 !== suggestion.name) {
      parts.push(suggestion.admin2);
    }
    if (suggestion.admin1 && suggestion.admin1 !== suggestion.name && suggestion.admin1 !== suggestion.admin2) {
      parts.push(suggestion.admin1);
    }
    parts.push(suggestion.country);
    
    return parts.join(', ');
  }

  function showSuggestions(suggestions) {
    if (suggestions.length === 0) {
      suggestionsDropdown.classList.add('hidden');
      return;
    }

    suggestionsDropdown.innerHTML = suggestions.map((suggestion, index) => `
      <div class="suggestion-item p-3 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer border-b border-gray-100 dark:border-gray-700 last:border-b-0 ${index === selectedSuggestionIndex ? 'bg-blue-50 dark:bg-blue-900/20' : ''}" data-index="${index}">
        <div class="font-medium text-gray-900 dark:text-white">${suggestion.name}</div>
        <div class="text-sm text-gray-600 dark:text-gray-400">
          ${[suggestion.admin2, suggestion.admin1, suggestion.country].filter(Boolean).join(', ')}
        </div>
      </div>
    `).join('');

    suggestionsDropdown.classList.remove('hidden');
  }

  function hideSuggestions() {
    suggestionsDropdown.classList.add('hidden');
    selectedSuggestionIndex = -1;
  }

  function showLocationModal() {
    locationModal.classList.remove('hidden');
  }

  function hideLocationModal() {
    locationModal.classList.add('hidden');
  }

  async function fetchSuggestions(query) {
    try {
      const results = await searchCities(query);
      suggestions = results;
      showSuggestions(results);
    } catch (error) {
      console.error('Error fetching suggestions:', error);
      hideSuggestions();
    }
  }

  async function getCurrentLocationWeather() {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('Geolocation is not supported by this browser'));
        return;
      }

      // Show loading state
      weatherContainer.innerHTML = `
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 text-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto mb-4"></div>
          <p class="text-gray-600 dark:text-gray-400">Getting your location...</p>
        </div>
      `;

      navigator.geolocation.getCurrentPosition(
        async (position) => {
          try {
            const { latitude, longitude } = position.coords;
            
            // Update loading message
            weatherContainer.innerHTML = `
              <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 text-center">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto mb-4"></div>
                <p class="text-gray-600 dark:text-gray-400">Loading weather for your location...</p>
              </div>
            `;

            const weatherData = await getWeatherData(latitude, longitude);
            const currentWeather = processWeatherData(weatherData, 'Your Location');
            
            // Update input to show current location
            cityInput.value = 'Your Current Location';
            
            displayWeatherData(currentWeather);
            resolve(currentWeather);
          } catch (error) {
            console.error('Error fetching weather for current location:', error);
            weatherContainer.innerHTML = `
              <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6 text-center">
                <p class="text-red-600 dark:text-red-400 text-lg">Failed to get weather for your location</p>
              </div>
            `;
            reject(error);
          }
        },
        (error) => {
          console.error('Geolocation error:', error);
          let errorMessage = 'Unable to get your location';
          
          switch(error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = 'Location access denied. Please enable location permissions.';
              localStorage.setItem('locationDenied', 'true');
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = 'Location information unavailable.';
              break;
            case error.TIMEOUT:
              errorMessage = 'Location request timed out.';
              break;
          }
          
          weatherContainer.innerHTML = `
            <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6 text-center">
              <p class="text-red-600 dark:text-red-400 text-lg">${errorMessage}</p>
            </div>
          `;
          reject(new Error(errorMessage));
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 300000 // 5 minutes
        }
      );
    });
  }

  function generateHourlyForecastHTML(currentWeather) {
    if (!currentWeather.hourlyTime || currentWeather.hourlyTime.length === 0) {
      return '';
    }

    const hourlyDataLength = Math.min(currentWeather.hourlyTime.length, 24);
    
    return `
      <div class="p-6">
        <h3 class="text-lg font-semibold mb-4 dark:text-white">24-Hour Forecast</h3>
        <div class="overflow-x-auto">
          <div class="flex space-x-3 pb-2" style="min-width: max-content;">
            ${currentWeather.hourlyTime.slice(0, hourlyDataLength).map((time, index) => {
              let content = `
                <div class="flex-shrink-0 bg-gray-50 dark:bg-gray-700 rounded-lg p-4 min-w-[120px]">
                  <p class="text-xs text-gray-600 dark:text-gray-300 mb-3 text-center font-medium">
                    ${new Date(time).getHours().toString().padStart(2, '0')}:00
                  </p>
              `;

              // Temperature
              if (currentWeather.hourlyTemperature && currentWeather.hourlyTemperature[index] !== undefined) {
                content += `
                  <div class="mb-3 text-center">
                    <div class="flex items-center justify-center mb-1">
                      <svg class="w-4 h-4 text-orange-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                      </svg>
                    </div>
                    <p class="text-lg font-bold text-orange-500">${currentWeather.hourlyTemperature[index]}°</p>
                  </div>
                `;
              }

              // Precipitation Probability
              if (currentWeather.hourlyPrecipitation && currentWeather.hourlyPrecipitation[index] !== undefined && currentWeather.hourlyPrecipitation[index] > 0) {
                content += `
                  <div class="mb-3">
                    <div class="flex items-center justify-center mb-1">
                      <svg class="w-3 h-3 text-blue-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.5 14.25c0-1.5 1.5-3 3-3s3 1.5 3 3-1.5 3-3 3-3-1.5-3-3z"/>
                      </svg>
                      <span class="text-xs text-gray-600 dark:text-gray-400">Rain</span>
                    </div>
                    <div class="flex items-end justify-center mb-1 h-6">
                      <div 
                        class="bg-blue-500 rounded-t w-4 transition-all duration-300"
                        style="height: ${Math.max(currentWeather.hourlyPrecipitation[index] * 0.2, 2)}px"
                      ></div>
                    </div>
                    <p class="text-xs font-semibold text-blue-600 dark:text-blue-400 text-center">${currentWeather.hourlyPrecipitation[index]}%</p>
                  </div>
                `;
              }

              // Precipitation Amount
              if (currentWeather.hourlyPrecipitationAmount && currentWeather.hourlyPrecipitationAmount[index] !== undefined && currentWeather.hourlyPrecipitationAmount[index] > 0) {
                content += `
                  <div class="mb-3">
                    <div class="flex items-center justify-center mb-1">
                      <svg class="w-3 h-3 text-indigo-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.5 14.25c0-1.5 1.5-3 3-3s3 1.5 3 3-1.5 3-3 3-3-1.5-3-3z"/>
                      </svg>
                      <span class="text-xs text-gray-600 dark:text-gray-400">mm</span>
                    </div>
                    <p class="text-xs font-semibold text-indigo-600 dark:text-indigo-400 text-center">${currentWeather.hourlyPrecipitationAmount[index]}</p>
                  </div>
                `;
              }

              // Wind Speed
              if (currentWeather.hourlyWindSpeed && currentWeather.hourlyWindSpeed[index] !== undefined) {
                content += `
                  <div class="mb-3">
                    <div class="flex items-center justify-center mb-1">
                      <svg class="w-3 h-3 text-green-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1a3 3 0 010 6h-1m8-6h1a3 3 0 010 6h-1m-9-6h1a3 3 0 010 6h-1"/>
                      </svg>
                      <span class="text-xs text-gray-600 dark:text-gray-400">Wind</span>
                    </div>
                    <p class="text-xs font-semibold text-green-600 dark:text-green-400 text-center">${currentWeather.hourlyWindSpeed[index]} km/h</p>
                  </div>
                `;
              }

              // Humidity
              if (currentWeather.hourlyHumidity && currentWeather.hourlyHumidity[index] !== undefined) {
                content += `
                  <div>
                    <div class="flex items-center justify-center mb-1">
                      <svg class="w-3 h-3 text-cyan-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"/>
                      </svg>
                      <span class="text-xs text-gray-600 dark:text-gray-400">RH</span>
                    </div>
                    <p class="text-xs font-semibold text-cyan-600 dark:text-cyan-400 text-center">${currentWeather.hourlyHumidity[index]}%</p>
                  </div>
                `;
              }

              content += '</div>';
              return content;
            }).join('')}
          </div>
        </div>
      </div>
    `;
  }

  function displayWeatherData(currentWeather) {
    const hourlyForecastHTML = generateHourlyForecastHTML(currentWeather);

    weatherContainer.innerHTML = `
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden">
        <div class="p-6 bg-gradient-to-br from-blue-500 to-purple-600 text-white">
          <h2 class="text-2xl font-semibold mb-4 text-center">${currentWeather.city}</h2>
          
          <div class="flex items-center justify-center mb-6">
            <div class="text-center mr-6">
              <div class="flex justify-center mb-2">${getWeatherIcon(currentWeather.weatherCode)}</div>
              <p class="text-lg opacity-90">${getWeatherDescription(currentWeather.weatherCode)}</p>
            </div>
            <div class="text-center">
              <p class="text-6xl font-light mb-2">${currentWeather.temperature}°</p>
              <p class="text-sm opacity-75">H: ${currentWeather.maxTemperature}° L: ${currentWeather.minTemperature}°</p>
            </div>
          </div>

          <div class="grid grid-cols-3 gap-3">
            <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
              <div class="flex items-center mb-1">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1a3 3 0 010 6h-1m8-6h1a3 3 0 010 6h-1m-9-6h1a3 3 0 010 6h-1"/>
                </svg>
                <span class="ml-2 text-sm opacity-75">Wind</span>
              </div>
              <p class="text-lg font-semibold">${currentWeather.windSpeed} km/h</p>
            </div>
            <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
              <div class="flex items-center mb-1">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"/>
                </svg>
                <span class="ml-2 text-sm opacity-75">Humidity</span>
              </div>
              <p class="text-lg font-semibold">${currentWeather.humidity}%</p>
            </div>
            <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
              <div class="flex items-center mb-1">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                </svg>
                <span class="ml-2 text-sm opacity-75">Feels Like</span>
              </div>
              <p class="text-lg font-semibold">${currentWeather.temperature}°C</p>
            </div>
          </div>
        </div>

        ${hourlyForecastHTML}
      </div>
    `;
  }

  async function fetchWeatherData(cityName, latitude, longitude) {
    // Show loading state
    weatherContainer.innerHTML = `
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
        <p class="text-gray-600 dark:text-gray-400">Loading weather data...</p>
      </div>
    `;

    try {
      const weatherData = await getWeatherData(latitude, longitude);
      const currentWeather = processWeatherData(weatherData, cityName);
      displayWeatherData(currentWeather);
    } catch (error) {
      console.error('Error fetching weather data:', error);
      weatherContainer.innerHTML = `
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6 text-center">
          <p class="text-red-600 dark:text-red-400 text-lg">${error.message}</p>
        </div>
      `;
    }
  }

  // Auto-request location on first visit (if not previously denied)
  if (!hasAskedForLocation && !locationDenied) {
    setTimeout(() => {
      showLocationModal();
    }, 1000); // Show modal after 1 second
  }

  // Location button click handler
  locationBtn.addEventListener('click', () => {
    if (locationDenied === 'true') {
      showLocationModal();
    } else {
      getCurrentLocationWeather();
    }
  });

  // Modal event handlers
  allowLocationBtn.addEventListener('click', () => {
    hideLocationModal();
    localStorage.setItem('locationAsked', 'true');
    localStorage.removeItem('locationDenied');
    getCurrentLocationWeather();
  });

  denyLocationBtn.addEventListener('click', () => {
    hideLocationModal();
    localStorage.setItem('locationAsked', 'true');
    localStorage.setItem('locationDenied', 'true');
  });

  // Close modal when clicking outside
  locationModal.addEventListener('click', (e) => {
    if (e.target === locationModal) {
      hideLocationModal();
      localStorage.setItem('locationAsked', 'true');
      localStorage.setItem('locationDenied', 'true');
    }
  });

  // Input event listener for suggestions
  cityInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();
    
    clearTimeout(debounceTimer);
    
    if (query.length < 2) {
      hideSuggestions();
      return;
    }

    debounceTimer = setTimeout(() => {
      fetchSuggestions(query);
    }, 300);
  });

  // Keyboard navigation
  cityInput.addEventListener('keydown', (e) => {
    if (!suggestionsDropdown.classList.contains('hidden')) {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        selectedSuggestionIndex = Math.min(selectedSuggestionIndex + 1, suggestions.length - 1);
        showSuggestions(suggestions);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        selectedSuggestionIndex = Math.max(selectedSuggestionIndex - 1, -1);
        showSuggestions(suggestions);
      } else if (e.key === 'Enter' && selectedSuggestionIndex >= 0) {
        e.preventDefault();
        const selectedSuggestion = suggestions[selectedSuggestionIndex];
        cityInput.value = formatLocationName(selectedSuggestion);
        hideSuggestions();
        fetchWeatherData(selectedSuggestion.name, selectedSuggestion.latitude, selectedSuggestion.longitude);
      } else if (e.key === 'Escape') {
        hideSuggestions();
      }
    }
  });

  // Click on suggestion
  suggestionsDropdown.addEventListener('click', (e) => {
    const suggestionItem = e.target.closest('.suggestion-item');
    if (suggestionItem) {
      const index = parseInt(suggestionItem.dataset.index);
      const selectedSuggestion = suggestions[index];
      cityInput.value = formatLocationName(selectedSuggestion);
      hideSuggestions();
      fetchWeatherData(selectedSuggestion.name, selectedSuggestion.latitude, selectedSuggestion.longitude);
    }
  });

  // Hide suggestions when clicking outside
  document.addEventListener('click', (e) => {
    if (!cityInput.contains(e.target) && !suggestionsDropdown.contains(e.target)) {
      hideSuggestions();
    }
  });

  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const cityInputValue = cityInput.value.trim();

    if (!cityInputValue) return;

    hideSuggestions();

    try {
      const { latitude, longitude, name } = await getCoordinates(cityInputValue);
      await fetchWeatherData(name, latitude, longitude);
    } catch (error) {
      console.error('Error fetching weather data:', error);
      weatherContainer.innerHTML = `
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6 text-center">
          <p class="text-red-600 dark:text-red-400 text-lg">${error.message}</p>
        </div>
      `;
    }
  });
</script>