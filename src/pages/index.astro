---
import Layout from '../layouts/Layout.astro';
import WeatherDisplay from '../components/WeatherDisplay.astro';
import { getCoordinates, getWeatherData } from '../utils/api';
import { processWeatherData } from '../utils/weather';

const defaultCity = "Madrid";

let currentWeather;
let error = null;

try {
  const { latitude, longitude, name } = await getCoordinates(defaultCity);
  const weatherData = await getWeatherData(latitude, longitude);
  currentWeather = processWeatherData(weatherData, name);
} catch (e) {
  error = e.message;
  console.error('Error fetching initial weather data:', e);
}
---

<Layout title="Weather App">
  <main class="container mx-auto px-4 py-8 max-w-4xl">
    <h1 class="text-5xl font-bold text-center mb-8 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
      WeatherMine
    </h1>
    
    <form id="search-form" class="mb-8">
      <div class="flex justify-center space-x-4 max-w-md mx-auto">
        <input
          type="text"
          id="city-input"
          placeholder="Enter city or village"
          class="border-2 border-gray-300 dark:border-gray-600 p-3 rounded-xl flex-grow bg-white dark:bg-gray-800 focus:border-blue-500 focus:outline-none transition-colors duration-200 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
          value={defaultCity}
        />
        <button type="submit" class="bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 transition-all duration-300 px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transform hover:scale-105">
          Search
        </button>
      </div>
    </form>
    
    <div id="weather-container">
      {error ? (
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6 text-center">
          <p class="text-red-600 dark:text-red-400 text-lg">{error}</p>
        </div>
      ) : (
        <WeatherDisplay weatherData={currentWeather} />
      )}
    </div>
  </main>
</Layout>

<script>
  import { getCoordinates, getWeatherData } from '../utils/api';
  import { processWeatherData, getWeatherDescription } from '../utils/weather';

  const form = document.getElementById('search-form');
  const weatherContainer = document.getElementById('weather-container');

  function getWeatherIcon(code: number): string {
    if (code <= 3) return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2" fill="none"/>
        <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
      </svg>
    `;
    if (code <= 48) return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
      </svg>
    `;
    if (code <= 67) return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
        <path d="M16 17v1a2 2 0 0 1-2 2H9l3-3 3 3a2 2 0 0 1-2-2v-1"/>
      </svg>
    `;
    if (code <= 77) return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
        <path d="M8 21l1-1 1 1-1 1-1-1zm4 0l1-1 1 1-1 1-1-1zm4 0l1-1 1 1-1 1-1-1z"/>
      </svg>
    `;
    return `
      <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
        <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
        <path d="M13 16l-4-4 4-4M17 16l-4-4 4-4"/>
      </svg>
    `;
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const cityInput = document.getElementById('city-input').value;

    // Show loading state
    weatherContainer.innerHTML = `
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
        <p class="text-gray-600 dark:text-gray-400">Loading weather data...</p>
      </div>
    `;

    try {
      const { latitude, longitude, name } = await getCoordinates(cityInput);
      const weatherData = await getWeatherData(latitude, longitude);
      const currentWeather = processWeatherData(weatherData, name);

      weatherContainer.innerHTML = `
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden">
          <div class="p-6 bg-gradient-to-br from-blue-500 to-purple-600 text-white">
            <h2 class="text-2xl font-semibold mb-4 text-center">${currentWeather.city}</h2>
            
            <div class="flex items-center justify-center mb-6">
              <div class="text-center mr-6">
                <div class="flex justify-center mb-2">${getWeatherIcon(currentWeather.weatherCode)}</div>
                <p class="text-lg opacity-90">${getWeatherDescription(currentWeather.weatherCode)}</p>
              </div>
              <div class="text-center">
                <p class="text-6xl font-light mb-2">${currentWeather.temperature}째</p>
                <p class="text-sm opacity-75">H: ${currentWeather.maxTemperature}째 L: ${currentWeather.minTemperature}째</p>
              </div>
            </div>

            <div class="grid grid-cols-2 gap-4">
              <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
                <div class="flex items-center mb-1">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1a3 3 0 010 6h-1m8-6h1a3 3 0 010 6h-1m-9-6h1a3 3 0 010 6h-1"/>
                  </svg>
                  <span class="ml-2 text-sm opacity-75">Wind Speed</span>
                </div>
                <p class="text-xl font-semibold">${currentWeather.windSpeed} km/h</p>
              </div>
              <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
                <div class="flex items-center mb-1">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                  </svg>
                  <span class="ml-2 text-sm opacity-75">Feels Like</span>
                </div>
                <p class="text-xl font-semibold">${currentWeather.temperature}째C</p>
              </div>
            </div>
          </div>

          <div class="p-6 space-y-6">
            <div>
              <h3 class="text-lg font-semibold mb-3 flex items-center dark:text-white">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.5 14.25c0-1.5 1.5-3 3-3s3 1.5 3 3-1.5 3-3 3-3-1.5-3-3z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.5 11.25c0-1.5-1.5-3-3-3s-3 1.5-3 3"/>
                </svg>
                <span class="ml-2">24-Hour Forecast</span>
              </h3>
              <div class="overflow-x-auto">
                <div class="flex space-x-4 pb-2" style="min-width: max-content;">
                  ${currentWeather.hourlyTime.map((time, index) => `
                    <div class="flex-shrink-0 text-center bg-gray-50 dark:bg-gray-700 rounded-lg p-3 min-w-[80px]">
                      <p class="text-xs text-gray-600 dark:text-gray-300 mb-1">
                        ${new Date(time).getHours().toString().padStart(2, '0')}:00
                      </p>
                      <div class="h-12 flex items-end justify-center mb-1">
                        <div 
                          class="bg-blue-500 rounded-t w-6 transition-all duration-300"
                          style="height: ${Math.max(currentWeather.hourlyPrecipitation[index] * 0.4, 4)}px"
                        ></div>
                      </div>
                      <p class="text-sm font-semibold dark:text-white">${currentWeather.hourlyPrecipitation[index]}%</p>
                    </div>
                  `).join('')}
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
    } catch (error) {
      console.error('Error fetching weather data:', error);
      weatherContainer.innerHTML = `
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6 text-center">
          <p class="text-red-600 dark:text-red-400 text-lg">${error.message}</p>
        </div>
      `;
    }
  });
</script>