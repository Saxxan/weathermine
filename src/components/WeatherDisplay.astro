---
import { getWeatherDescription } from "../utils/weather";

interface WeatherData {
  city: string;
  temperature: number;
  minTemperature: number;
  maxTemperature: number;
  weatherCode: number;
  windSpeed: number;
  hourlyPrecipitation: number[];
  hourlyTime: string[];
  hourlyWindSpeed: number[];
  hourlyPrecipitationAmount: number[];
  hourlyTemperature: number[];
  hourlyHumidity: number[];
}

const { weatherData } = Astro.props;

function getWeatherIcon(code: number): string {
  if (code <= 3) return `
    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
      <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2" fill="none"/>
      <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
    </svg>
  `;
  if (code <= 48) return `
    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
      <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
    </svg>
  `;
  if (code <= 67) return `
    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
      <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
      <path d="M16 17v1a2 2 0 0 1-2 2H9l3-3 3 3a2 2 0 0 1-2-2v-1"/>
    </svg>
  `;
  if (code <= 77) return `
    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
      <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
      <path d="M8 21l1-1 1 1-1 1-1-1zm4 0l1-1 1 1-1 1-1-1zm4 0l1-1 1 1-1 1-1-1z"/>
    </svg>
  `;
  return `
    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
      <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z" stroke="currentColor" stroke-width="2" fill="none"/>
      <path d="M13 16l-4-4 4-4M17 16l-4-4 4-4"/>
    </svg>
  `;
}

function getWindIcon(): string {
  return `
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1a3 3 0 010 6h-1m8-6h1a3 3 0 010 6h-1m-9-6h1a3 3 0 010 6h-1"/>
    </svg>
  `;
}

function getThermometerIcon(): string {
  return `
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
    </svg>
  `;
}

function getDropletIcon(): string {
  return `
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.5 14.25c0-1.5 1.5-3 3-3s3 1.5 3 3-1.5 3-3 3-3-1.5-3-3z"/>
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.5 11.25c0-1.5-1.5-3-3-3s-3 1.5-3 3"/>
    </svg>
  `;
}

function getHumidityIcon(): string {
  return `
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"/>
    </svg>
  `;
}

// Check if we have valid hourly data
const hasHourlyData = weatherData?.hourlyTime && weatherData.hourlyTime.length > 0;
const hourlyDataLength = hasHourlyData ? Math.min(weatherData.hourlyTime.length, 24) : 0;
---

<div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden">
  <!-- Main Weather Info -->
  <div class="p-6 bg-gradient-to-br from-blue-500 to-purple-600 text-white">
    <h2 class="text-2xl font-semibold mb-4 text-center">
      {weatherData.city}
    </h2>
    
    <div class="flex items-center justify-center mb-6">
      <div class="text-center mr-6">
        <div class="flex justify-center mb-2" set:html={getWeatherIcon(weatherData.weatherCode)}></div>
        <p class="text-lg opacity-90">{getWeatherDescription(weatherData.weatherCode)}</p>
      </div>
      <div class="text-center">
        <p class="text-6xl font-light mb-2">{weatherData.temperature}°</p>
        <p class="text-sm opacity-75">
          H: {weatherData.maxTemperature}° L: {weatherData.minTemperature}°
        </p>
      </div>
    </div>

    <div class="grid grid-cols-2 gap-4">
      <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
        <div class="flex items-center mb-1">
          <span set:html={getWindIcon()}></span>
          <span class="ml-2 text-sm opacity-75">Wind Speed</span>
        </div>
        <p class="text-xl font-semibold">{weatherData.windSpeed} km/h</p>
      </div>
      <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
        <div class="flex items-center mb-1">
          <span set:html={getThermometerIcon()}></span>
          <span class="ml-2 text-sm opacity-75">Feels Like</span>
        </div>
        <p class="text-xl font-semibold">{weatherData.temperature}°C</p>
      </div>
    </div>
  </div>

  <!-- Hourly Forecast Section -->
  {hasHourlyData && (
    <div class="p-6">
      <h3 class="text-lg font-semibold mb-4 dark:text-white">24-Hour Forecast</h3>
      <div class="overflow-x-auto">
        <div class="flex space-x-3 pb-2" style="min-width: max-content;">
          {weatherData.hourlyTime.slice(0, hourlyDataLength).map((time, index) => (
            <div class="flex-shrink-0 bg-gray-50 dark:bg-gray-700 rounded-lg p-4 min-w-[120px]">
              <!-- Time -->
              <p class="text-xs text-gray-600 dark:text-gray-300 mb-3 text-center font-medium">
                {new Date(time).getHours().toString().padStart(2, '0')}:00
              </p>
              
              <!-- Temperature -->
              {weatherData.hourlyTemperature && weatherData.hourlyTemperature[index] !== undefined && (
                <div class="mb-3 text-center">
                  <div class="flex items-center justify-center mb-1">
                    <svg class="w-4 h-4 text-orange-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                    </svg>
                  </div>
                  <p class="text-lg font-bold text-orange-500">{weatherData.hourlyTemperature[index]}°</p>
                </div>
              )}

              <!-- Precipitation Probability -->
              {weatherData.hourlyPrecipitation && weatherData.hourlyPrecipitation[index] !== undefined && weatherData.hourlyPrecipitation[index] > 0 && (
                <div class="mb-3">
                  <div class="flex items-center justify-center mb-1">
                    <svg class="w-3 h-3 text-blue-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.5 14.25c0-1.5 1.5-3 3-3s3 1.5 3 3-1.5 3-3 3-3-1.5-3-3z"/>
                    </svg>
                    <span class="text-xs text-gray-600 dark:text-gray-400">Rain</span>
                  </div>
                  <div class="flex items-end justify-center mb-1 h-6">
                    <div 
                      class="bg-blue-500 rounded-t w-4 transition-all duration-300"
                      style={`height: ${Math.max(weatherData.hourlyPrecipitation[index] * 0.2, 2)}px`}
                    ></div>
                  </div>
                  <p class="text-xs font-semibold text-blue-600 dark:text-blue-400 text-center">{weatherData.hourlyPrecipitation[index]}%</p>
                </div>
              )}

              <!-- Precipitation Amount -->
              {weatherData.hourlyPrecipitationAmount && weatherData.hourlyPrecipitationAmount[index] !== undefined && weatherData.hourlyPrecipitationAmount[index] > 0 && (
                <div class="mb-3">
                  <div class="flex items-center justify-center mb-1">
                    <svg class="w-3 h-3 text-indigo-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.5 14.25c0-1.5 1.5-3 3-3s3 1.5 3 3-1.5 3-3 3-3-1.5-3-3z"/>
                    </svg>
                    <span class="text-xs text-gray-600 dark:text-gray-400">mm</span>
                  </div>
                  <p class="text-xs font-semibold text-indigo-600 dark:text-indigo-400 text-center">{weatherData.hourlyPrecipitationAmount[index]}</p>
                </div>
              )}

              <!-- Wind Speed -->
              {weatherData.hourlyWindSpeed && weatherData.hourlyWindSpeed[index] !== undefined && (
                <div class="mb-3">
                  <div class="flex items-center justify-center mb-1">
                    <svg class="w-3 h-3 text-green-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1a3 3 0 010 6h-1m8-6h1a3 3 0 010 6h-1m-9-6h1a3 3 0 010 6h-1"/>
                    </svg>
                    <span class="text-xs text-gray-600 dark:text-gray-400">Wind</span>
                  </div>
                  <p class="text-xs font-semibold text-green-600 dark:text-green-400 text-center">{weatherData.hourlyWindSpeed[index]} km/h</p>
                </div>
              )}

              <!-- Humidity -->
              {weatherData.hourlyHumidity && weatherData.hourlyHumidity[index] !== undefined && (
                <div>
                  <div class="flex items-center justify-center mb-1">
                    <svg class="w-3 h-3 text-cyan-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"/>
                    </svg>
                    <span class="text-xs text-gray-600 dark:text-gray-400">RH</span>
                  </div>
                  <p class="text-xs font-semibold text-cyan-600 dark:text-cyan-400 text-center">{weatherData.hourlyHumidity[index]}%</p>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  )}
</div>